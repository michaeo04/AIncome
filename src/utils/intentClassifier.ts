// Intent Classifier - Lightweight rule-based classifier for chat messages

import { ChatIntent, IntentClassificationResult } from '../types';

// Keywords that indicate transaction creation intent
const TRANSACTION_KEYWORDS = {
  // Vietnamese transaction verbs
  verbs: [
    'mua', 'b√°n', 'chi', 'thu', 'tr·∫£', 'n·∫°p', 'n·ªôp', 'ƒë√≥ng',
    'ƒÉn', 'u·ªëng', 'm∆∞·ª£n', 'cho vay', 'vay', 'nh·∫≠n', 'ƒë∆∞·ª£c',
    'ti√™u', 'ti·∫øt ki·ªám', 'g·ª≠i', 'r√∫t', 'chuy·ªÉn'
  ],

  // Money-related words
  money: [
    'ƒë·ªìng', 'ngh√¨n', 'tri·ªáu', 't·ª∑', 'k', 'tr', 'vnd', 'ƒë',
    'ti·ªÅn', 'gi√°', 'ph√≠', 'c∆∞·ªõc', 'l∆∞∆°ng', 'th∆∞·ªüng'
  ],

  // Common expense categories
  categories: [
    'ph·ªü', 'c∆°m', 'xƒÉng', 'ƒëi·ªán', 'n∆∞·ªõc', 'c√† ph√™', 'cafe',
    'tr√†', 'thu·ªëc', 'xe', 'taxi', 'grab', 'si√™u th·ªã', 'ch·ª£',
    'qu·∫ßn √°o', 'gi√†y', 'phim', 'game', 's√°ch', 'h·ªçc ph√≠'
  ],

  // Time indicators (suggests recording a transaction)
  time: [
    'h√¥m nay', 'ng√†y', 'th√°ng', 'nƒÉm', 'tu·∫ßn', 'h√¥m qua',
    's√°ng', 'chi·ªÅu', 't·ªëi', 'tr∆∞a', 'v·ª´a', 'm·ªõi'
  ]
};

// Keywords that indicate casual conversation
const SMALL_TALK_KEYWORDS = {
  greetings: [
    'ch√†o', 'xin ch√†o', 'hello', 'hi', 'hey', 'helo',
    'alo', 'al√¥', 'ch√†o b·∫°n', 'ch√†o anh', 'ch√†o ch·ªã'
  ],
  questions: [
    'l√† g√¨', 'th·∫ø n√†o', 'nh∆∞ th·∫ø n√†o', 'sao', 't·∫°i sao',
    'l√†m sao', 'khi n√†o', '·ªü ƒë√¢u', 'ai', 'c√≥ th·ªÉ'
  ],
  thanks: [
    'c·∫£m ∆°n', 'thanks', 'thank you', 'c√°m ∆°n', 'tks', 'ty'
  ],
  goodbyes: [
    't·∫°m bi·ªát', 'bye', 'goodbye', 'h·∫πn g·∫∑p', 'b√°i bai'
  ]
};

/**
 * Classifies user intent from message
 * Returns intent type and confidence score
 */
export function classifyIntent(message: string): IntentClassificationResult {
  const normalizedMessage = message.toLowerCase().trim();

  // Empty message
  if (!normalizedMessage) {
    return { intent: 'unknown', confidence: 0 };
  }

  // Check for small talk patterns first
  const smallTalkScore = calculateSmallTalkScore(normalizedMessage);

  // Check for transaction patterns
  const transactionScore = calculateTransactionScore(normalizedMessage);

  // Decision logic
  if (transactionScore > smallTalkScore && transactionScore > 0.3) {
    return {
      intent: 'create_transaction',
      confidence: Math.min(transactionScore, 0.95)
    };
  }

  if (smallTalkScore > 0.5) {
    return {
      intent: 'small_talk',
      confidence: Math.min(smallTalkScore, 0.9)
    };
  }

  // If message contains numbers, likely a transaction
  if (/\d+/.test(normalizedMessage) && transactionScore > 0.2) {
    return {
      intent: 'create_transaction',
      confidence: 0.7
    };
  }

  // Default to unknown
  return { intent: 'unknown', confidence: 0.5 };
}

/**
 * Calculate score for small talk intent
 */
function calculateSmallTalkScore(message: string): number {
  let score = 0;
  let matches = 0;

  // Check greetings
  for (const keyword of SMALL_TALK_KEYWORDS.greetings) {
    if (message.includes(keyword)) {
      score += 0.4;
      matches++;
      break; // Only count once
    }
  }

  // Check questions
  for (const keyword of SMALL_TALK_KEYWORDS.questions) {
    if (message.includes(keyword)) {
      score += 0.3;
      matches++;
      break;
    }
  }

  // Check thanks
  for (const keyword of SMALL_TALK_KEYWORDS.thanks) {
    if (message.includes(keyword)) {
      score += 0.3;
      matches++;
      break;
    }
  }

  // Check goodbyes
  for (const keyword of SMALL_TALK_KEYWORDS.goodbyes) {
    if (message.includes(keyword)) {
      score += 0.3;
      matches++;
      break;
    }
  }

  // Very short messages without numbers are likely small talk
  if (message.length < 15 && !/\d+/.test(message)) {
    score += 0.2;
  }

  return Math.min(score, 1.0);
}

/**
 * Calculate score for transaction intent
 */
function calculateTransactionScore(message: string): number {
  let score = 0;
  let matches = 0;

  // Check for transaction verbs
  for (const keyword of TRANSACTION_KEYWORDS.verbs) {
    if (message.includes(keyword)) {
      score += 0.25;
      matches++;
      break;
    }
  }

  // Check for money keywords
  for (const keyword of TRANSACTION_KEYWORDS.money) {
    if (message.includes(keyword)) {
      score += 0.3;
      matches++;
      break;
    }
  }

  // Check for category keywords
  for (const keyword of TRANSACTION_KEYWORDS.categories) {
    if (message.includes(keyword)) {
      score += 0.2;
      matches++;
      break;
    }
  }

  // Check for time indicators
  for (const keyword of TRANSACTION_KEYWORDS.time) {
    if (message.includes(keyword)) {
      score += 0.15;
      matches++;
      break;
    }
  }

  // Check for numeric patterns (amounts)
  const hasNumber = /\d+/.test(message);
  if (hasNumber) {
    score += 0.3;
    matches++;
  }

  // Check for currency patterns (50k, 100tr, 1.5 tri·ªáu)
  const hasCurrencyPattern = /\d+[k|tr|tri·ªáu|ngh√¨n|ƒë·ªìng|vnd]/i.test(message);
  if (hasCurrencyPattern) {
    score += 0.4;
    matches++;
  }

  // Boost if multiple indicators present
  if (matches >= 3) {
    score += 0.2;
  }

  return Math.min(score, 1.0);
}

/**
 * Generate appropriate response for small talk
 */
export function generateSmallTalkResponse(message: string): string {
  const normalizedMessage = message.toLowerCase().trim();

  // Greetings
  if (SMALL_TALK_KEYWORDS.greetings.some(g => normalizedMessage.includes(g))) {
    return 'Ch√†o b·∫°n! üëã M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n th√™m giao d·ªãch b·∫±ng c√°ch n√≥i t·ª± nhi√™n. V√≠ d·ª•: "ƒÇn ph·ªü 50k h√¥m nay" ho·∫∑c "L∆∞∆°ng th√°ng 10 tri·ªáu". H√£y th·ª≠ nh√©!';
  }

  // Thanks
  if (SMALL_TALK_KEYWORDS.thanks.some(t => normalizedMessage.includes(t))) {
    return 'Kh√¥ng c√≥ g√¨! üòä M√¨nh lu√¥n s·∫µn s√†ng gi√∫p b·∫°n qu·∫£n l√Ω t√†i ch√≠nh.';
  }

  // Goodbyes
  if (SMALL_TALK_KEYWORDS.goodbyes.some(g => normalizedMessage.includes(g))) {
    return 'T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i b·∫°n! üëã';
  }

  // Questions about capability
  if (normalizedMessage.includes('l√†m g√¨') || normalizedMessage.includes('gi√∫p g√¨')) {
    return 'M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ Th√™m giao d·ªãch thu/chi b·∫±ng l·ªùi n√≥i t·ª± nhi√™n\n‚Ä¢ Hi·ªÉu ti·∫øng Vi·ªát v√† c√°c c√°ch n√≥i kh√°c nhau\n‚Ä¢ T·ª± ƒë·ªông ph√¢n lo·∫°i v√† ƒë·ªÅ xu·∫•t h·∫°ng m·ª•c\n\nH√£y th·ª≠ n√≥i v·ªÅ m·ªôt giao d·ªãch nh√©! V√≠ d·ª•: "ƒê·ªï xƒÉng 200k"';
  }

  // Default friendly response
  return 'M√¨nh hi·ªÉu r·ªìi! N·∫øu b·∫°n mu·ªën th√™m giao d·ªãch, h√£y n√≥i t·ª± nhi√™n nh∆∞ "ƒÇn c∆°m 75k" ho·∫∑c "Nh·∫≠n l∆∞∆°ng 15 tri·ªáu" nh√©! üòä';
}
